1. 通过设置控制寄存器来触发某些功能
    控制DMA需要将必要的信息以一个约定好的数据结构放置在内存当中，再将对应的
    内存地址给到DMA。DMA会自动读取其中的内容来执行操作。
    
    板子上和网络相关的芯片有MAC和PHY，MAC实现数据链路层。PHY是物理层，通过、
    控制MAC控制器来实现收发包。MAC寄控制器包含了一个DMA，DMA会自动把数据
    放到指定的内存地址，或者将指定位置的内容发送出去。为此，我们需要设置一组
    描述符，描述我们希望发送的数据的起始地址、长度等信息，之后告知DMA描述符
    所在的位置，触发DMA执行发送的功能。之后DMA会自动读取描述符中的信息，并将
    其发送出去，接受数据的构成也是类似，可以将DMA看做一个函数，描述符就像传递
    给函数的参数。通过控制读写相应的控制寄存器，将描述符的地址告知DMA。DMA就会
    自动读取描述符的内容，并完成相关的功能。

    TCP/IP协议分为五层，自顶向下的前三层（应用层、传输层和网络层）都是软件实现
    的概念（集成在操作系统当中）。而后两层（数据链路层和物理层）则有相应的硬件
    控制器实现，通常链路层的芯片集成在处理器外部，即MAC Controller芯片。而物理
    层，则是有独立于处理器之外的PHY芯片实现

    MAC芯片实现的是数据链路层的功能，如寻址。数据帧构建。数据差错检查等。

    PHY芯片则是定义了数据传送与接受锁需要的电与光信号、线路状态、数据编码等，并
    向数据链路层提供标准的接口，本次实验不需要考虑PHY层的实现

    MAC内部集成独有的DMA控制器，专门配合MAC传输数据，该DMA控制器不能被其他模块
    使用。MAC控制寄存器包括MAC寄存器部分和DMA寄存器部分。MAC寄存器的起始地址是需
    要从FDT中读取。
    slcr(中断寄存器)==========================>不需要直接进行操作
    ethernet(以太网寄存器)
    plic(中断控制器)==========================>不需要直接进行操作
    nr_irqs//支持多少个外部irq
    其中ethernet是以太网寄存器，这些寄存器是需要我们自己操作的

    访问某个寄存器======》寄存器组的起始地址 + 寄存器的偏移量

    读取到的是物理地址，因此===>
        1. 通过ioremap将一个物理地址（上述中读取到的）映射到某个空闲的虚地址上
        2. 

DMA描述符：
    记录数据包的内存地址和传输状态。分别定义发送描述符(Tx Desciptor)和
    接受描述符(Rx Descriptor)
    每个DMA描述符分为两部分：
        第一部分：
            记录数据的地址
        第二部分：
            记录描述符的状态=======>描述符的地址必须保证按照所连接的系统
            总线位宽对齐，同时保证使用小尾端
    DMA接受描述符：
        包含两个32位的字。
        word0:
            [31:0] 位表示该接受描述符对应的接受内容buffer的地址，第一位表示
        该描述符是否是最后一个描述符，第0位表示该描述符的控制权归谁所有
        word1:
            表示接受描述符的状态，如需使用，需自行查看意思
        接受描述符以环式相连，MAX寄存器中的RXQbase会指向当前使用的描述符
    DMA发送描述符 
        包含两个32位的字 
        word0
            表示该发送描述符对应的发送内容buffer的地址
        word1
            包含对发送描述符的控制和描述符的状态，第31位表示发送是否完成，第30
            位表示该描述符是否是最后一个描述符，其余位待研究
    都是环式相连
描述符重点关注问题：
    关注发送描述符和接受描述符是否写正确：
        发送描述符
            需要设置buffer地址和length，清空used位，设置last位。last位
        代表当前描述符中的buffer是当前帧的最后一个buffer，因为一个帧也许需要
        多个描述符描述，但是在当前实验当中只需要一个描述符描述。故设置上last位
        
        接受描述符
            设置buffer位和wrap位(wrap代表描述符列表中的最后一个描述符，所以wrap
            位只需要在最后一个Rx描述符上个设置即可)，当收到包以后，硬件会自动将收
            到的包的长度写到Rx描述符的对应位置，wrap位的作用是：网卡的发送或接受
            使能了以后，网卡dma就会顺着RXQBase或RXQBase每收到一个包之后当前描述
            符的指针就会往后偏移一个，直到遇到某个描述符设置了wrap位，就会重新指
            回最开始RXQBase或TXQBase设置的位置重新来
    ===1. 在main函数调用的网卡初始化函数EmacPsInit中会调用EmacPsSetupBD函数，将描述符
    ===的初始化流程实现在这个函数中

第一步 打开qemu的网卡

任务一：实现轮询式的网卡收发包功能
    不注册网卡中断处理函数
    do_net_send() ===> EmacPsWaitSend() ===> 发送完成(轮询或者等待中断)
    XEmacPs_SetMacAddress()=====>设置mac地址
        似乎已经设置好了？
    EmacPsSend()函数============> 设置发送描述符，建立发送描述环，设置发送
    描述符的word0, word1, 的标志位
    EmacPsRecv()函数============> 设置接收描述符
    EmacPsWaitSend()函数========> 开启发送后，寻找硬件写好的描述符，并取回需要的内容
    EmacPsWaitRecv()函数========> 开启接收后，寻找硬件写好的描述符，并取回需要的内容
    
